<div class="container">
    <h1 class="page-title">Progress Entries</h1>

    {{#if progressEntries.length}}
        <ul class="list-group">
            {{#each progressEntries}}
                <li class="list-group-item">
                    <strong>Date:</strong> {{this.date}}
                    {{#if this.metrics.weight}}
                        <br/><strong>Weight:</strong> {{this.metrics.weight}}
                    {{/if}}
                    {{#if this.metrics.performance}}
                        <br/><strong>Performance:</strong> {{this.metrics.performance}}
                    {{/if}}
                    {{#if this.metrics.goalProgress}}
                        <br/><strong>Goal Progress:</strong> {{this.metrics.goalProgress}}%
                    {{/if}}
                    {{#if this.notes}}
                        <br/><strong>Notes:</strong> {{this.notes}}
                    {{/if}}
                </li>
            {{/each}}
        </ul>
    {{else}}
        <p class="no-data">No progress entries found.</p>
    {{/if}}

    <h2>Add Progress Entry</h2>
    <form action="/progress" method="POST" class="form">
        <div class="form-group">
            <label for="date">Date (YYYY-MM-DD):</label>
            <input type="text" id="date" name="date" class="form-control" required />
        </div>
        <div class="form-group">
            <label for="metrics">Metrics (JSON format):</label>
            <textarea id="metrics" name="metrics" class="form-control" rows="3" required></textarea>
            <small>Example: {"weight":80,"performance":"5km run","goalProgress":50}</small>
        </div>
        <div class="form-group">
            <label for="notes">Notes:</label>
            <input type="text" id="notes" name="notes" class="form-control" />
        </div>
        <button type="submit" class="btn">Add Progress</button>
    </form>
    <div class="chart-container">
    <h2>Progress Chart</h2>
    <canvas id="progressChart"></canvas>
</div>
<script>
    const fitnessGoals = {{{json user.fitnessGoals}}}; // Serialize server-side data
    const progressEntries = {{{json progressEntries}}}; // Serialize server-side data

    console.log('Fitness Goals:', fitnessGoals);
    console.log('Progress Entries:', progressEntries);

    const labels = ['Start', ...progressEntries.map(entry => entry.date), 'Goal'];
    const data = [
        fitnessGoals.currentWeight,
        ...progressEntries.map(entry => entry.metrics.weight),
        fitnessGoals.targetWeight
    ];

    const ctx = document.getElementById('progressChart').getContext('2d');
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Weight Progress',
                data: data,
                borderColor: 'rgba(75, 192, 192, 1)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                fill: false,
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: true
                }
            },
            scales: {
                x: { title: { display: true, text: 'Time' } },
                y: { title: { display: true, text: 'Weight (kg)' } }
            }
        }
    });
</script>
<script src="/js/chart.umd.js"></script>
</div>
